Before applying DIP
class Car {
    void move() {
        System.out.println("Car moving");
    }
}

class Driver {
    Car car = new Car();
    void drive() {
        car.move();
    }
}

ISSUE
The driver is dependant on the car class, therefore we cannot change the vehicle option to other type such as bike

Solution:

// Abstraction
interface Vehicle {
    void move();
}

// Concrete implementation
class Car implements Vehicle {
    public void move() {
        System.out.println("Car moving");
    }
}

// Another implementation 
class Bike implements Vehicle {
    public void move() {
        System.out.println("Bike riding");
    }
}

// High-level module depends on abstraction
class Driver {
    private Vehicle vehicle;

    public Driver(Vehicle vehicle) {
        this.vehicle = vehicle;
    }

    public void drive() {
        vehicle.move();
    }
}

// Main program
public class Main {
    public static void main(String[] args) {
        Vehicle car = new Car();               // You can switch this to new Bike()
        Driver driver = new Driver(car);       // Injecting the dependency
        driver.drive();                        // Output: Car moving
    }
}
